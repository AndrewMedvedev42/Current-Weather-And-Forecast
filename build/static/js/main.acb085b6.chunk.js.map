{"version":3,"sources":["API.js","actions/weatherActoin.js","components/Nav.jsx","components/forecastCard.jsx","components/CountryFlag.jsx","components/weatherDisplayer.jsx","App.js","reducers/weatherReducer.js","reportWebVitals.js","index.js"],"names":["currentWeatherURL","city_name","process","weatherForecastURL","getCountryURL","country_name","loadWeather","dispatch","a","type","axios","get","currentWeather","weatherForecast","payload","current","forecast","Nav","useDispatch","useState","cityName","setCityName","Navigation","className","onChange","e","target","value","console","log","onClick","styled","div","ForeCastCard","date","weatherByHours","data","ForecastSlot","map","item","timeInHours","time","slice","ForecastDetails","src","condition","icon","alt","CountryFlag","country","useSelector","state","countryDetails","useEffect","loadCounty","flag","WeatherDisplayer","CurrentWeather","Forecast","isLoading","LoadingMessage","id","size","CurrentWeatherContainer","location","name","localtime","text","temp_c","wind_kph","ForecastContainer","forecastday","date_epoch","day","hour","astro","App","State","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","composeEnchancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acb085b6.chunk.js","sourcesContent":["//CURRENT WEATHER API\nexport const currentWeatherURL = (city_name) => `https://api.weatherapi.com/v1/current.json?key=${process.env.REACT_APP_WEATHER_USER_API_KEY}&q=${city_name}&aqi=no`\n//WEATHER FORECAST API\nexport const weatherForecastURL = (city_name) => `https://api.weatherapi.com/v1/forecast.json?key=${process.env.REACT_APP_WEATHER_USER_API_KEY}&q=${city_name}&days=6&aqi=no&alerts=no`\n\nexport const getCountryURL = (country_name) => `https://restcountries.eu/rest/v2/name/${country_name}`","import axios from \"axios\"\nimport {currentWeatherURL, weatherForecastURL, getCountryURL} from \"../API\"\n\nexport const loadWeather = (city_name) => async (dispatch) => {\n\n    dispatch({\n        type:\"IS_LOADING\"\n    })\n\n    const currentWeather = await axios.get(currentWeatherURL(city_name))\n    const weatherForecast = await axios.get(weatherForecastURL(city_name))\n    dispatch({\n        type:\"FETCH_WEATHER\",\n        payload:{\n            current: currentWeather,\n            forecast: weatherForecast,\n        }\n    })\n}\n\nexport const loadCounty = (country_name) => async (dispatch) => {\n    const country = await axios.get(getCountryURL(country_name))\n    dispatch({\n        type:\"FETCH_COUNTRY\",\n        payload:{\n            country: country,\n        }\n    })\n}","import React from 'react';\nimport { useState } from \"react\";\nimport {useDispatch} from \"react-redux\"\nimport {loadWeather} from \"../actions/weatherActoin\"\nimport styled from \"styled-components\"\n\nexport const Nav = () => {\n    const dispatch = useDispatch()\n    const [cityName, setCityName] = useState(\"\")\n\n    const onChange = (e) => {\n        setCityName(e.target.value);\n        console.log(e.target.value);\n    }\n    const submitAction = () => {\n        dispatch(loadWeather(cityName))\n    }\n    return(\n        <Navigation className=\"Nav\">\n            {/* <h1 className=\"centerTitle\">Current weather and Forecast</h1> */}\n            <div>\n                <input onChange={onChange} type=\"text\" />\n                <button value={cityName} type=\"submit\" onClick={submitAction}>Search</button>\n            </div>\n        </Navigation>\n    )\n}\n\nconst Navigation = styled.div`\n    padding:1.5rem;\n    .centerTitle{\n            text-align: center;\n        }\n    div{\n        display: flex;\n        justify-content: center;\n    }\n    input, button{\n        font-family: 'Exo 2', sans-serif;\n        font-size:1.5rem;\n        padding: 0.5rem 1.5rem;\n        outline: none;\n        border: none;\n        box-shadow:#0086b3 0.5rem 0.5rem 0px;\n    }\n    input{\n        width: 300px;\n        border: #1ac6ff solid 0.5rem;\n        border-top-left-radius: 2rem;\n        border-bottom-left-radius: 2rem;\n    }\n    button{\n        padding: 0.5rem 2rem;\n        cursor: pointer;\n        color: white;\n        background-color: #1ac6ff;\n        transition: 0.5s;\n        font-weight: bolder;\n        border-top-right-radius: 2rem;\n        border-bottom-right-radius: 2rem;\n    }\n    button:hover{\n        background-color: #00ace6;\n        letter-spacing: 1px;\n    }\n`","import styled from \"styled-components\"\n\nexport const ForeCastCard = ({date, data, weatherByHours}) => {\n    return(\n        <ForecastSlot className=\"ForecastSlot\">\n            <div>\n                <article>\n                    <h3>{date}</h3>\n                </article>\n                {/* <article>\n                    <h2>{data.condition.text}</h2>\n                    <img id=\"icon\" src={data.condition.icon} alt=\"\" />\n                </article>\n                <article>\n                    <p>Max Temp: {data.maxtemp_c} C</p>\n                    <p>Min Temp: {data.mintemp_c} C</p>\n                </article> */}\n            </div>\n            <section className=\"DetailedForecast\">\n                {weatherByHours.map((item)=>{\n                    const timeInHours = item.time.slice(11)\n\n                    if(timeInHours === \"09:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"12:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"15:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"18:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"21:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"23:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"00:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"03:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"06:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }\n                })}\n            </section>\n        </ForecastSlot>\n    )\n}\n\nconst ForecastDetails = ({data,time}) =>{\n    return(\n        <div className=\"detailContainer\">\n            <img className=\"forecastIcon\" src={data.condition.icon} alt=\"\" />\n            <p className=\"forecastDetail\">{time}</p>\n            {/* <p className=\"forecastDetail\">{data.condition.text}</p> */}\n        </div>\n    )\n}\n\nconst ForecastSlot = styled.div`\n    margin: 1rem;\n    padding: 1rem;\n`","import {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {loadCounty} from \"../actions/weatherActoin\"\n\nexport const CountryFlag = ({country_name}) => {\n    const dispatch = useDispatch()\n\n    const country = useSelector((state) => state.countryDetails)\n\n    useEffect(()=>{\n        dispatch(loadCounty(country_name))\n    },[dispatch])\n\n    if(country[0]){\n        return <img className=\"countryFlag\" src={country[0].data[0].flag} alt=\"countryFlag\" />\n    }else{\n        return <img src=\"\" alt=\"\" />\n    }\n\n}","import React from 'react';\nimport { useEffect } from \"react\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {loadWeather} from \"../actions/weatherActoin\"\nimport {ForeCastCard} from \"./forecastCard\"\nimport styled from \"styled-components\"\nimport { FiSun } from \"react-icons/fi\";\nimport FadeIn from 'react-fade-in';\nimport {CountryFlag} from \"./CountryFlag\"\n\nexport const WeatherDisplayer = () => {\n    const CurrentWeather = useSelector((state) => state.currentWeather)\n    const Forecast = useSelector((state) => state.weatherForecast)\n    const isLoading = useSelector((state) => state.isLoading)\n\n    const dispatch = useDispatch()\n\n    useEffect(()=>{\n        dispatch(loadWeather(\"kyoto\"))\n    },[dispatch])\n\n    return(\n        <section>\n            {!isLoading ? (\n                <FadeIn>\n                <section className=\"MainContainer\">\n                    <CurrentWeatherContainer className=\"CurrentWeatherContainer\">\n                    <h1 className=\"centerTitle\">Current weather</h1>\n                        <FadeIn>\n                        <div>\n                            <div className=\"countryData\">\n                                <h2>{CurrentWeather.data.location.country}</h2>\n                                <CountryFlag country_name={CurrentWeather.data.location.country}/>\n                            </div>\n                            <h1>{CurrentWeather.data.location.name}</h1>\n                            <h3>{CurrentWeather.data.location.localtime}</h3>\n                        </div>\n                        <div>\n                            <h2>{CurrentWeather.data.current.condition.text}</h2>\n                            <img id=\"icon\" src={CurrentWeather.data.current.condition.icon} alt=\"\" />\n                        </div>\n                        <div>\n                            <p>Temp: {CurrentWeather.data.current.temp_c} C</p>\n                            <p>Wind: {CurrentWeather.data.current.wind_kph} km/h</p>\n                        </div>\n                        </FadeIn>\n                    </CurrentWeatherContainer>\n                    <ForecastContainer className=\"ForecastContainer\">\n                    <FadeIn>\n                        <h1 className=\"centerTitle\">Forecast for {CurrentWeather.data.location.name}</h1>\n                        <section className=\"ForecastSection\">\n                            {Forecast.data.forecast.forecastday.map((item)=>{\n                                const {date, date_epoch, day, astro, hour} = item\n                                return <ForeCastCard key={date_epoch} date={date} data={day} weatherByHours={hour}/>\n                            })}\n                        </section>\n                    </FadeIn>\n                    </ForecastContainer>\n                </section>\n                </FadeIn>\n            ):(<LoadingMessage>\n                <FiSun id=\"iconAnimate\" size={150}/>\n                <h1>The weather is loading!</h1>\n                <h4>if the page won't load that means that server isn't responding</h4>\n                <h3>Try to fill your input correctly or reload page.</h3>\n            </LoadingMessage>)}\n        </section>\n    )\n}\n\nconst LoadingMessage = styled.div`\n    color: #0086b3;\n    height: 50vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`\n\nconst CurrentWeatherContainer = styled.div`\n    margin: 1rem;\n    padding: 1rem;\n    border: #1ac6ff solid 1rem;\n    border-radius: 2rem;\n    box-shadow:#0086b3 0.5rem 0.5rem 0px;\n`\nconst ForecastContainer = styled.div`\n    margin: 1rem;\n    padding: 1rem;\n    border: #1ac6ff solid 1rem;\n    border-radius: 2rem;\n    box-shadow:#0086b3 0.5rem 0.5rem 0px;\n`","import {Nav} from \"./components/Nav\"\nimport {WeatherDisplayer} from \"./components/weatherDisplayer\"\n\nfunction App() {\n  return (\n    <section>\n      <Nav/>\n      <WeatherDisplayer/>\n    </section>\n  );\n}\n\nexport default App;\n","const State = {\n    currentWeather:[],\n    weatherForecast:[],\n    countryDetails:[],\n    isLoading:true\n}\n\nexport const weatherReducer = (state=State, action) => {\n    switch (action.type){\n        case \"FETCH_WEATHER\":\n            return {...state, currentWeather:action.payload.current,\n                                weatherForecast:action.payload.forecast,\n                                    isLoading:false}\n        case \"IS_LOADING\":\n            return {...state, isLoading:true}\n        case \"FETCH_COUNTRY\":\n            return {...state, countryDetails:[action.payload.country]}\n        default:\n            return {...state}\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {weatherReducer} from './reducers/weatherReducer'\nimport reportWebVitals from './reportWebVitals';\n//REDUX\nimport {Provider} from \"react-redux\"\nimport {createStore, applyMiddleware, compose} from \"redux\"\nimport thunk from \"redux-thunk\" \n//STYLES\nimport \"./styles/css/index.css\"\n\nconst composeEnchancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(weatherReducer , composeEnchancer(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\ndocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}