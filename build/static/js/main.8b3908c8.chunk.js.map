{"version":3,"sources":["API.js","actions/weatherActoin.js","components/Nav.jsx","components/forecastCard.jsx","components/weatherDisplayer.jsx","App.js","reducers/weatherReducer.js","reportWebVitals.js","index.js"],"names":["currentWeatherURL","city_name","process","weatherForecastURL","loadWeather","dispatch","a","axios","get","currentWeather","weatherForecast","type","payload","current","forecast","Nav","useDispatch","useState","cityName","setCityName","onChange","e","target","value","console","log","onClick","ForeCastCard","date","data","condition","text","src","icon","alt","maxtemp_c","mintemp_c","WeatherDisplayer","CurrentWeather","useSelector","state","Forecast","useEffect","location","country","name","localtime","temp_c","wind_mph","forecastday","map","item","date_epoch","day","astro","App","State","isLoading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","composeEnchancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b3908c8.chunk.js","sourcesContent":["//CURRENT WEATHER API\nexport const currentWeatherURL = (city_name) => `https://api.weatherapi.com/v1/current.json?key=${process.env.REACT_APP_WEATHER_USER_API_KEY}&q=${city_name}&aqi=no`\n//WEATHER FORECAST API\nexport const weatherForecastURL = (city_name) => `https://api.weatherapi.com/v1/forecast.json?key=${process.env.REACT_APP_WEATHER_USER_API_KEY}&q=${city_name}&days=5&aqi=no&alerts=no`","import axios from \"axios\"\nimport {currentWeatherURL, weatherForecastURL} from \"../API\"\n\nexport const loadWeather = (city_name) => async (dispatch) => {\n    const currentWeather = await axios.get(currentWeatherURL(city_name))\n    const weatherForecast = await axios.get(weatherForecastURL(city_name))\n    dispatch({\n        type:\"FETCH_WEATHER\",\n        payload:{\n            current: currentWeather,\n            forecast: weatherForecast,\n        }\n    })\n}","import React from 'react';\nimport { useState } from \"react\";\nimport {useDispatch} from \"react-redux\"\nimport {loadWeather} from \"../actions/weatherActoin\"\n\nexport const Nav = () => {\n    const dispatch = useDispatch()\n    const [cityName, setCityName] = useState(\"\")\n\n    const onChange = (e) => {\n        setCityName(e.target.value);\n        console.log(e.target.value);\n    }\n    const submitAction = () => {\n        dispatch(loadWeather(cityName))\n    }\n    return(\n        <nav>\n            <div>\n                <input onChange={onChange} type=\"text\" />\n                <button value={cityName} type=\"submit\" onClick={submitAction}>Click</button>\n            </div>\n        </nav>\n    )\n}","export const ForeCastCard = ({date, data}) => {\n    return(\n        <div>\n            <article>\n                <h1>{date}</h1>\n            </article>\n            <article>\n                <h2>{data.condition.text}</h2>\n                <img src={data.condition.icon} alt=\"\" />\n            </article>\n            <article>\n                <p>Max Temp: {data.maxtemp_c} C</p>\n                <p>Min Temp: {data.mintemp_c} C</p>\n            </article>\n        </div>\n    )\n}","import React from 'react';\nimport { useEffect } from \"react\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {loadWeather} from \"../actions/weatherActoin\"\nimport {ForeCastCard} from \"./forecastCard\"\n\nexport const WeatherDisplayer = () => {\n\n    const CurrentWeather = useSelector((state) => state.currentWeather)\n    const Forecast = useSelector((state) => state.weatherForecast)\n\n    const dispatch = useDispatch()\n\n    useEffect(()=>{\n        dispatch(loadWeather(\"kiev\"))\n    },[dispatch])\n\n    return(\n        <section>\n            {CurrentWeather.data ? (\n                <section>\n                    <article>\n                        <h2>{CurrentWeather.data.location.country}</h2>\n                        <h1>{CurrentWeather.data.location.name}</h1>\n                        <h3>{CurrentWeather.data.location.localtime}</h3>\n                    </article>\n                    <article>\n                        <h2>{CurrentWeather.data.current.condition.text}</h2>\n                        <img src={CurrentWeather.data.current.condition.icon} alt=\"\" />\n                    </article>\n                    <article>\n                        <p>Temp: {CurrentWeather.data.current.temp_c} C</p>\n                        <p>Wind: {CurrentWeather.data.current.wind_mph} C</p>\n                    </article>\n                    <section>\n                        {Forecast.data.forecast.forecastday.map((item)=>{\n                            const {date, date_epoch, day, astro} = item\n                            return <ForeCastCard key={date_epoch} date={date} data={day}/>\n                        })}\n                    </section>\n                </section>\n            ):console.log(null)}\n        </section>\n    )\n}","import {Nav} from \"./components/Nav\"\nimport {WeatherDisplayer} from \"./components/weatherDisplayer\"\n\nfunction App() {\n  return (\n    <section>\n      <Nav/>\n      <WeatherDisplayer/>\n    </section>\n  );\n}\n\nexport default App;\n","const State = {\n    currentWeather:[],\n    weatherForecast:[],\n    isLoading:true\n}\n\nexport const weatherReducer = (state=State, action) => {\n    switch (action.type){\n        case \"FETCH_WEATHER\":\n            return {...state, currentWeather:action.payload.current,\n                                weatherForecast:action.payload.forecast}\n        default:\n            return {...state}\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {weatherReducer} from './reducers/weatherReducer'\nimport reportWebVitals from './reportWebVitals';\n//REDUX\nimport {Provider} from \"react-redux\"\nimport {createStore, applyMiddleware, compose} from \"redux\"\nimport thunk from \"redux-thunk\" \n\nconst composeEnchancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(weatherReducer , composeEnchancer(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\ndocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}