{"version":3,"sources":["API.js","actions/weatherActoin.js","components/Nav.jsx","components/forecastCard.jsx","components/weatherDisplayer.jsx","App.js","reducers/weatherReducer.js","reportWebVitals.js","index.js"],"names":["currentWeatherURL","city_name","process","weatherForecastURL","loadWeather","dispatch","a","type","axios","get","currentWeather","weatherForecast","payload","current","forecast","console","log","Nav","useDispatch","useState","cityName","setCityName","Navigation","className","onChange","e","target","value","onClick","styled","div","ForeCastCard","date","weatherByHours","data","map","item","timeInHours","time","slice","ForecastDetails","src","condition","icon","alt","WeatherDisplayer","CurrentWeather","useSelector","state","Forecast","isLoading","isFailedToLoadData","isFailedToFetchData","useEffect","id","size","location","name","localtime","text","temp_c","wind_kph","forecastday","date_epoch","day","hour","href","rel","App","State","countryDetails","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","composeEnchancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9df7518d.chunk.js","sourcesContent":["//CURRENT WEATHER API\nexport const currentWeatherURL = (city_name) => `https://api.weatherapi.com/v1/current.json?key=${process.env.REACT_APP_WEATHER_USER_API_KEY}&q=${city_name}&aqi=no`\n//WEATHER FORECAST API\nexport const weatherForecastURL = (city_name) => `https://api.weatherapi.com/v1/forecast.json?key=${process.env.REACT_APP_WEATHER_USER_API_KEY}&q=${city_name}&days=6&aqi=no&alerts=no`\n\nexport const getCountryURL = (country_name) => `https://restcountries.eu/rest/v2/name/${country_name}`","import axios from \"axios\"\nimport {currentWeatherURL, weatherForecastURL} from \"../API\"\n\nexport const loadWeather = (city_name) => async (dispatch) => {\n    dispatch({\n        type:\"IS_LOADING\"\n    })\n    try {\n        const currentWeather = await axios.get(currentWeatherURL(city_name))\n        const weatherForecast = await axios.get(weatherForecastURL(city_name))\n        dispatch({\n            type:\"FETCH_WEATHER\",\n            payload:{\n                current: currentWeather,\n                forecast: weatherForecast,\n            }\n        })  \n    } catch (error) {\n        console.log(`ERROR ${error}`);\n        dispatch({\n            type:\"FAILED_TO_FETCH_DATA\",\n        })\n    }\n}","import React from 'react';\nimport { useState } from \"react\";\nimport {useDispatch} from \"react-redux\"\nimport {loadWeather} from \"../actions/weatherActoin\"\nimport styled from \"styled-components\"\n\nexport const Nav = () => {\n    const dispatch = useDispatch()\n    const [cityName, setCityName] = useState(\"\")\n\n    const onChange = (e) => {\n        setCityName(e.target.value);\n        console.log(e.target.value);\n    }\n    const submitAction = () => {\n        dispatch(loadWeather(cityName))\n    }\n    return(\n        <Navigation className=\"Nav\">\n            {/* <h1 className=\"centerTitle\">Current weather and Forecast</h1> */}\n            <div>\n                <input className=\"input-field\" onChange={onChange} type=\"text\" />\n                <button value={cityName} type=\"submit\" onClick={submitAction}>Search</button>\n            </div>\n        </Navigation>\n    )\n}\n\nconst Navigation = styled.div`\n    padding:1.5rem;\n    .centerTitle{\n            text-align: center;\n        }\n    div{\n        display: flex;\n        justify-content: center;\n    }\n    input, button{\n        font-family: 'Exo 2', sans-serif;\n        font-size:1.5rem;\n        padding: 0.5rem 1.5rem;\n        outline: none;\n        border: none;\n        box-shadow:#0086b3 0.5rem 0.5rem 0px;\n    }\n    input{\n        border: #1ac6ff solid 0.5rem;\n        border-top-left-radius: 2rem;\n        border-bottom-left-radius: 2rem;\n    }\n    button{\n        padding: 0.5rem 2rem;\n        cursor: pointer;\n        color: white;\n        background-color: #1ac6ff;\n        transition: 0.5s;\n        font-weight: bolder;\n        border-top-right-radius: 2rem;\n        border-bottom-right-radius: 2rem;\n    }\n    button:hover{\n        background-color: #00ace6;\n        letter-spacing: 1px;\n    }\n`","export const ForeCastCard = ({date, data, weatherByHours}) => {\n    return(\n        <article className=\"forecast-slot\">\n            <h2 className=\"forecast-date center-title\">{date}</h2>\n            <section className=\"forecast-schedule-list\">\n                {weatherByHours.map((item)=>{\n                    const timeInHours = item.time.slice(11)\n\n                    if(timeInHours === \"09:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"12:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"15:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"18:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"21:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"23:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"00:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"03:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }else if(timeInHours === \"06:00\"){\n                        return <ForecastDetails key={timeInHours} data={item} time={timeInHours}/>\n                    }\n                })}\n            </section>\n        </article>\n    )\n}\n\nconst ForecastDetails = ({data,time}) =>{\n    return(\n        <div className=\"forecast-details\">\n            <img className=\"icon\" src={data.condition.icon} alt=\"\" />\n            <p className=\"forecast-time\">{time}</p>\n        </div>\n    )\n}","import React from 'react';\nimport { useEffect } from \"react\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {loadWeather} from \"../actions/weatherActoin\"\nimport {ForeCastCard} from \"./forecastCard\"\nimport { FiSun } from \"react-icons/fi\";\nimport { FaSkull } from \"react-icons/fa\";\n\nexport const WeatherDisplayer = () => {\n    const CurrentWeather = useSelector((state) => state.currentWeather)\n    const Forecast = useSelector((state) => state.weatherForecast)\n    const isLoading = useSelector((state) => state.isLoading)\n    const isFailedToLoadData = useSelector((state) => state.isFailedToFetchData)\n\n    console.log(isFailedToLoadData);\n\n    const dispatch = useDispatch()\n\n    useEffect(()=>{\n        dispatch(loadWeather(\"kyoto\"))\n    },[dispatch])\n\n    return(\n        <section className=\"main-section\">\n            {!isLoading ? (\n                !isFailedToLoadData ? (\n                    <>\n                    <section className=\"weather-results-section\">\n                    <section className=\"section current-weather-section\">\n                        <h1 className=\"title center-title\">Current weather</h1>\n                        <h2 className=\"location-name\">{CurrentWeather.data.location.name}</h2>\n                        <h3 className=\"location-localtime\">{CurrentWeather.data.location.localtime}</h3>\n                        <h2 className=\"condition-text\">{CurrentWeather.data.current.condition.text}</h2>\n                        <img className=\"weather-icon\" id=\"icon\" src={CurrentWeather.data.current.condition.icon} alt=\"\" />\n                        <p className=\"temperature-text\">Temp: {CurrentWeather.data.current.temp_c} C</p>\n                        <p className=\"wind-speed\">Wind: {CurrentWeather.data.current.wind_kph} km/h</p>\n                    </section>\n\n                    <section className=\"section forecast-section\">\n                        <h1 className=\"title center-title\">Forecast for {CurrentWeather.data.location.name}</h1>\n                        <section className=\"forecast-list\">\n                            {Forecast.data.forecast.forecastday.map((item)=>{\n                                const {date, date_epoch, day, hour} = item\n                                return <ForeCastCard key={date_epoch} date={date} data={day} weatherByHours={hour}/>\n                            })}\n                        </section>\n                    </section>\n\n                    <section className=\"section app-details-section\">\n                            <p>Weather data provided by <a href=\"https://www.weatherapi.com/\" rel=\"noreferrer\" target=\"_blank\"> weatherapi.com</a></p>\n                    </section>\n                </section>\n                </> \n                ) : (\n                    <section className=\"error-message\">\n                        <FaSkull className=\"loading-icon\" size={100}/>\n                        <h1 className=\"message\">Server error or bad request!</h1>\n                    </section>\n                )   \n            ):(<section className=\"loading-message\">\n                <FiSun className=\"loading-icon\" id=\"loading-icon\" size={150}/>\n                <h1 className=\"message\">The weather is loading!</h1>\n            </section>)}\n        </section>\n    )\n}\n","import {Nav} from \"./components/Nav\"\nimport {WeatherDisplayer} from \"./components/weatherDisplayer\"\n\nfunction App() {\n  return (\n    <section>\n      <Nav/>\n      <WeatherDisplayer/>\n    </section>\n  );\n}\n\nexport default App;\n","const State = {\n    currentWeather:[],\n    weatherForecast:[],\n    countryDetails:[],\n    isLoading:true,\n    isFailedToFetchData:false\n}\n\nexport const weatherReducer = (state=State, action) => {\n    switch (action.type){\n        case \"FETCH_WEATHER\":\n            return {...state, currentWeather:action.payload.current,\n                                weatherForecast:action.payload.forecast,\n                                    isFailedToFetchData:false,\n                                    isLoading:false}\n        case \"IS_LOADING\":\n            return {...state, isLoading:true}\n\n        case \"FAILED_TO_FETCH_DATA\":\n            return {...state, \n                isFailedToFetchData:true,\n                    isLoading:false}\n        default:\n            return {...state}\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {weatherReducer} from './reducers/weatherReducer'\nimport reportWebVitals from './reportWebVitals';\n//REDUX\nimport {Provider} from \"react-redux\"\nimport {createStore, applyMiddleware, compose} from \"redux\"\nimport thunk from \"redux-thunk\" \n//STYLES\nimport \"./styles/css/index.css\"\n\nconst composeEnchancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(weatherReducer , composeEnchancer(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\ndocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}