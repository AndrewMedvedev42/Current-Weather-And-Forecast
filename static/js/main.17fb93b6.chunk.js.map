{"version":3,"sources":["components/Nav.jsx","API.js","components/weatherDisplayer.jsx","actions/weatherActoin.js","App.js","reducers/weatherReducer.js","reportWebVitals.js","index.js"],"names":["Nav","type","currentWeatherURL","city_name","weatherForecastURL","WeatherDisplayer","dispatch","useDispatch","useEffect","a","console","log","axios","get","currentWeather","weatherForecast","payload","current","forecast","App","State","isLoading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","composeEnchancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qJAAaA,EAAM,WACf,OACI,8BACI,iCACI,uBAAOC,KAAK,SACZ,iD,iDCJHC,EAAoB,SAACC,GAAD,+FAAiGA,EAAjG,YAEpBC,EAAqB,SAACD,GAAD,gGAAkGA,EAAlG,6BCCrBE,EAAmB,WAC5B,IAAMC,EAAWC,cAMjB,OAJAC,qBAAU,WCJa,IAACL,EDKpBG,GCLoBH,EDKC,OCLF,uCAAe,WAAOG,GAAP,iBAAAG,EAAA,6DACtCC,QAAQC,IAAIT,EAAkBC,IAC9BO,QAAQC,IAAIP,EAAmBD,IAFO,SAGTS,IAAMC,IAAIX,EAAkBC,IAHnB,cAGhCW,EAHgC,gBAIRF,IAAMC,IAAIT,EAAmBD,IAJrB,OAIhCY,EAJgC,OAKtCT,EAAS,CACLL,KAAK,gBACLe,QAAQ,CACJC,QAASH,EACTI,SAAUH,KAToB,2CAAf,0DDMrB,CAACT,IAGC,kCACI,gDEDGa,MATf,WACE,OACE,oCACE,cAAC,EAAD,IACA,cAAC,EAAD,Q,OCPAC,EAAQ,CACVN,eAAe,GACfC,gBAAgB,GAChBM,WAAU,GCSCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCGRQ,EAAmBC,OAAOC,sCAAwCC,IAElEC,EAAQC,aFNgB,WAA0B,IAAzBC,EAAwB,uDAAlBjB,EAAOkB,EAAW,uCACnD,OAAQA,EAAOrC,MACX,IAAK,gBACD,OAAO,2BAAIoC,GAAX,IAAkBvB,eAAewB,EAAOtB,QAAQC,QAC5BF,gBAAgBuB,EAAOtB,QAAQE,WACvD,QACI,OAAO,eAAImB,MEAoBN,EAAiBQ,YAAgBC,OAE5EC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGNS,SAASC,eAAe,SAMxBvB,M","file":"static/js/main.17fb93b6.chunk.js","sourcesContent":["export const Nav = () => {\n    return(\n        <nav>\n            <form>\n                <input type=\"text\" />\n                <button>Click</button>\n            </form>\n        </nav>\n    )\n}","//CURRENT WEATHER API\nexport const currentWeatherURL = (city_name) => `http://api.weatherapi.com/v1/current.json?key=50d2badf529046f1b5f91233210706&q=${city_name}&aqi=no`\n//WEATHER FORECAST API\nexport const weatherForecastURL = (city_name) => `http://api.weatherapi.com/v1/forecast.json?key=50d2badf529046f1b5f91233210706&q=${city_name}&days=5&aqi=no&alerts=no`","import { useEffect } from \"react\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {loadWeather} from \"../actions/weatherActoin\"\n\nexport const WeatherDisplayer = () => {\n    const dispatch = useDispatch()\n\n    useEffect(()=>{\n        dispatch(loadWeather(\"kiev\"))\n    },[dispatch])\n\n    return(\n        <section>\n            <h1>Hello World</h1>\n        </section>\n    )\n}","import axios from \"axios\"\nimport {currentWeatherURL, weatherForecastURL} from \"../API\"\n\nexport const loadWeather = (city_name) => async (dispatch) => {\n    console.log(currentWeatherURL(city_name));\n    console.log(weatherForecastURL(city_name));\n    const currentWeather = await axios.get(currentWeatherURL(city_name))\n    const weatherForecast = await axios.get(weatherForecastURL(city_name))\n    dispatch({\n        type:\"FETCH_WEATHER\",\n        payload:{\n            current: currentWeather,\n            forecast: weatherForecast,\n        }\n    })\n}","import {Nav} from \"./components/Nav\"\nimport {WeatherDisplayer} from \"./components/weatherDisplayer\"\n\nfunction App() {\n  return (\n    <section>\n      <Nav/>\n      <WeatherDisplayer/>\n    </section>\n  );\n}\n\nexport default App;\n","const State = {\n    currentWeather:[],\n    weatherForecast:[],\n    isLoading:true\n}\n\nexport const weatherReducer = (state=State, action) => {\n    switch (action.type){\n        case \"FETCH_WEATHER\":\n            return {...state, currentWeather:action.payload.current,\n                                weatherForecast:action.payload.forecast}\n        default:\n            return {...state}\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {weatherReducer} from './reducers/weatherReducer'\nimport reportWebVitals from './reportWebVitals';\n//REDUX\nimport {Provider} from \"react-redux\"\nimport {createStore, applyMiddleware, compose} from \"redux\"\nimport thunk from \"redux-thunk\" \n\nconst composeEnchancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(weatherReducer , composeEnchancer(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\ndocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}